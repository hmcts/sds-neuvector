parameters:
  environment: ''
  location: ''
  stack: ''
  project: ''
  tfversion: ''
  serviceConnection: ''


steps:
  - bash: echo ${{ parameters.environment }}
  - template: keyvault-read.yaml
    parameters:
      serviceConnection: ${{ parameters.serviceConnection }}
      environment: ${{ parameters.environment }}
  - task: TerraformInstaller@0
    displayName: Terraform install
    inputs:
      terraformVersion: ${{ parameters.tfversion }}

  - task: TerraformCLI@0
    displayName: terraform init
    inputs:
      command: init
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
      backendType: azurerm
      backendServiceArm: ${{ parameters.serviceConnection }}
      backendAzureRmResourceGroupName: 'azure-control-${{ parameters.environment }}-rg'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}
      backendAzureRmStorageAccountName: $(controlStorageAccount)
      backendAzureRmStorageAccountSku: Standard_LRS
      backendAzureRmContainerName: subscription-tfstate
      backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ parameters.environment }}/${{ parameters.stack }}/terraform.tfstate'
      commandOptions: '-backend-config=subscription_id=04d27a32-7a07-48b3-95b8-3c8691e1a263'

  - task: TerraformCLI@0
    displayName: terraform plan
    inputs:
      command: plan
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure
      environmentServiceName: ${{ parameters.serviceConnection }}
      commandOptions: '-out tfplan-${{ parameters.project }}-${{ parameters.environment }}-${{ parameters.stack }}  -var environment=${{ parameters.environment }} -var activity_name=${{ parameters.stack }} -var builtFrom=$(Build.Repository.Name)  -lock=false'
      publishPlanResults: $(System.StageDisplayName)

  - task: Bash@3
    condition: and(succeeded(), eq(variables.isMaster, true))
    name: "CheckFileChanges"
    displayName: "CheckFileChanges"
    env:
      files_list: 'infrastructure/ environments/${{ parameters.environment }}/${{ parameters.environment }}.tfvars pipeline/'
    inputs:
      filePath: pipeline/scripts/file-check-changes.sh

  - task: TerraformCLI@0
    displayName: Apply-${{ parameters.stack }}
    condition: and(succeeded(), eq(variables.isMaster, true), eq(variables['CheckFileChanges.SOURCE_CODE_CHANGED'], 'true'))
    inputs:
      command: apply
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure
      environmentServiceName: ${{ parameters.serviceConnection }}
      commandOptions: '--auto-approve tfplan-${{ parameters.project }}-${{ parameters.environment }}-${{ parameters.stack }}'

  - task: Bash@3
    displayName: "Remove local tfstate"
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
      script: |
        rm -f terraform.tfstate* && rm -rf .terraform/

  - task: AzureCLI@2
    displayName: 'Unlock TF state if required'
    condition: always()
    inputs:
      scriptType: bash
      scriptLocation: scriptPath
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptPath: $(System.DefaultWorkingDirectory)/pipeline/scripts/unlock-tf-state.sh
      arguments: ${{ parameters.location }} ${{ parameters.storage_account_name }}
