# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - main

variables:
  terraformVersion: 0.14.4
  timeoutInMinutes: 60
  agentPool: 'ubuntu-18.04'
  build: $(Build.BuildNumber)
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: Precheck
    jobs:
      - job: Validate
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        pool:   
          vmImage: ${{ variables.agentPool }}
        steps: 
        - task: TerraformInstaller@0
          displayName: Terraform install
          inputs: 
            terraformVersion: ${{ variables.terraformVersion }}
        - task: AzureKeyVault@1
          displayName: Retrieve keyvault secret for ADO token
          inputs:
            ConnectedServiceName: azurerm-sandbox
            keyVaultName: infra-vault-nonprod
            secretsFilter: 'azure-devops-token'
            runAsPreJob: false
        - task: Bash@3
          displayName: Prevent parallel run
          env:
            thisbuild: $(Build.BuildId)
            pipelinedefinition: $(System.DefinitionId)
            azuredevopstoken: $(azure-devops-token)
          inputs:
            filePath: pipeline-scripts/builds-check.sh
        - task: PowerShell@2
          displayName: Run tests
          inputs:
            targetType: 'filePath'
            filePath: $(System.DefaultWorkingDirectory)/pipeline/scripts/pester-tests.ps1
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            failTaskOnFailedTests: true
          condition: always()




